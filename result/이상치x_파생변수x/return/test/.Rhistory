xg_test_mse_592 = calculate_mse(model='xg', fit=xg_best_fit_592, test_592)
# Calculate the test mse for gu
xg_test_mse_gu_3508 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_3508)
xg_test_mse_gu_3523 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_3523)
xg_test_mse_gu_3569 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_3569)
xg_test_mse_gu_3571 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_3571)
xg_test_mse_gu_3579 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_3579)
xg_test_mse_gu_3582 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_3582)
xg_test_mse_gu_3860 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_3860)
xg_test_mse_gu_500 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_500)
xg_test_mse_gu_590 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_590)
xg_test_mse_gu_591 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_591)
xg_test_mse_gu_592 = calculate_mse(model='xg', fit=xg_best_fit_gu, test_592)
# Calculate the test mse for dong
xg_test_mse_dong_3508 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_3508)
xg_test_mse_dong_3523 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_3523)
xg_test_mse_dong_3569 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_3569)
xg_test_mse_dong_3571 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_3571)
xg_test_mse_dong_3579 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_3579)
xg_test_mse_dong_3582 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_3582)
xg_test_mse_dong_3860 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_3860)
xg_test_mse_dong_500 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_500)
xg_test_mse_dong_590 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_590)
xg_test_mse_dong_591 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_591)
xg_test_mse_dong_592 = calculate_mse(model='xg', fit=xg_best_fit_dong, test_592)
# combine the test mse result for individual station
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_3508$nrounds, xg_best_com_3508$max_depth,
xg_best_com_3508$eta, xg_test_mse_3508))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_3523$nrounds, xg_best_com_3523$max_depth,
xg_best_com_3523$eta, xg_test_mse_3523))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_3569$nrounds, xg_best_com_3569$max_depth,
xg_best_com_3569$eta, xg_test_mse_3569))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_3571$nrounds, xg_best_com_3571$max_depth,
xg_best_com_3571$eta, xg_test_mse_3571))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_3579$nrounds, xg_best_com_3579$max_depth,
xg_best_com_3579$eta, xg_test_mse_3579))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_3582$nrounds, xg_best_com_3582$max_depth,
xg_best_com_3582$eta, xg_test_mse_3582))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_3860$nrounds, xg_best_com_3860$max_depth,
xg_best_com_3860$eta, xg_test_mse_3860))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_500$nrounds, xg_best_com_500$max_depth,
xg_best_com_500$eta, xg_test_mse_500))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_590$nrounds, xg_best_com_590$max_depth,
xg_best_com_590$eta, xg_test_mse_590))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_591$nrounds, xg_best_com_591$max_depth,
xg_best_com_591$eta, xg_test_mse_591))
xg_test_result_ind = rbind(xg_test_result_ind, c(xg_best_com_592$nrounds, xg_best_com_592$max_depth,
xg_best_com_592$eta, xg_test_mse_592))
# combine the test mse result for gu
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_3508$nrounds, xg_best_com_3508$max_depth,
xg_best_com_3508$eta, xg_test_mse_gu_3508))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_3523$nrounds, xg_best_com_3523$max_depth,
xg_best_com_3523$eta, xg_test_mse_gu_3523))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_3569$nrounds, xg_best_com_3569$max_depth,
xg_best_com_3569$eta, xg_test_mse_gu_3569))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_3571$nrounds, xg_best_com_3571$max_depth,
xg_best_com_3571$eta, xg_test_mse_gu_3571))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_3579$nrounds, xg_best_com_3579$max_depth,
xg_best_com_3579$eta, xg_test_mse_gu_3579))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_3582$nrounds, xg_best_com_3582$max_depth,
xg_best_com_3582$eta, xg_test_mse_gu_3582))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_3860$nrounds, xg_best_com_3860$max_depth,
xg_best_com_3860$eta, xg_test_mse_gu_3860))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_500$nrounds, xg_best_com_500$max_depth,
xg_best_com_500$eta, xg_test_mse_gu_500))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_590$nrounds, xg_best_com_590$max_depth,
xg_best_com_590$eta, xg_test_mse_gu_590))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_591$nrounds, xg_best_com_591$max_depth,
xg_best_com_591$eta, xg_test_mse_gu_591))
xg_test_result_gu = rbind(xg_test_result_gu, c(xg_best_com_592$nrounds, xg_best_com_592$max_depth,
xg_best_com_592$eta, xg_test_mse_gu_592))
# combine the test mse result for dong
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_3508$nrounds, xg_best_com_3508$max_depth,
xg_best_com_3508$eta, xg_test_mse_dong_3508))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_3523$nrounds, xg_best_com_3523$max_depth,
xg_best_com_3523$eta, xg_test_mse_dong_3523))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_3569$nrounds, xg_best_com_3569$max_depth,
xg_best_com_3569$eta, xg_test_mse_dong_3569))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_3571$nrounds, xg_best_com_3571$max_depth,
xg_best_com_3571$eta, xg_test_mse_dong_3571))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_3579$nrounds, xg_best_com_3579$max_depth,
xg_best_com_3579$eta, xg_test_mse_dong_3579))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_3582$nrounds, xg_best_com_3582$max_depth,
xg_best_com_3582$eta, xg_test_mse_dong_3582))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_3860$nrounds, xg_best_com_3860$max_depth,
xg_best_com_3860$eta, xg_test_mse_dong_3860))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_500$nrounds, xg_best_com_500$max_depth,
xg_best_com_500$eta, xg_test_mse_dong_500))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_590$nrounds, xg_best_com_590$max_depth,
xg_best_com_590$eta, xg_test_mse_dong_590))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_591$nrounds, xg_best_com_591$max_depth,
xg_best_com_591$eta, xg_test_mse_dong_591))
xg_test_result_dong = rbind(xg_test_result_dong, c(xg_best_com_592$nrounds, xg_best_com_592$max_depth,
xg_best_com_592$eta, xg_test_mse_dong_592))
}
# convert matrix to data frame
rf_train_result = as.data.frame(rf_train_result)
rf_val_result = as.data.frame(rf_val_result)
rf_best_result = as.data.frame(rf_best_result)
rf_test_result_ind = as.data.frame(rf_test_result_ind)
rf_test_result_gu = as.data.frame(rf_test_result_gu)
rf_test_result_dong = as.data.frame(rf_test_result_dong)
elnet_train_result = as.data.frame(elnet_train_result)
elnet_val_result = as.data.frame(elnet_val_result)
elnet_best_result = as.data.frame(elnet_best_result)
elnet_test_result_ind = as.data.frame(elnet_test_result_ind)
elnet_test_result_gu = as.data.frame(elnet_test_result_gu)
elnet_test_result_dong = as.data.frame(elnet_test_result_dong)
xg_train_result = as.data.frame(xg_train_result)
xg_val_result = as.data.frame(xg_val_result)
xg_best_result = as.data.frame(xg_best_result)
xg_test_result_ind = as.data.frame(xg_test_result_ind)
xg_test_result_gu = as.data.frame(xg_test_result_gu)
xg_test_result_dong = as.data.frame(xg_test_result_dong)
# naming columns
rf_colnames = c('ntree', 'mtry', 'mse')
elnet_colnames = c('alpha', 'lambda', 'mse')
xg_colnames = c('nrounds', 'max_depth', 'eta', 'mse')
colnames(rf_best_result) = rf_colnames
colnames(rf_test_result_ind) = rf_colnames
colnames(rf_test_result_gu) = rf_colnames
colnames(rf_test_result_dong) = rf_colnames
colnames(elnet_best_result) = elnet_colnames
colnames(elnet_test_result_ind) = elnet_colnames
colnames(elnet_test_result_gu) = elnet_colnames
colnames(elnet_test_result_dong) = elnet_colnames
colnames(xg_best_result) = xg_colnames
colnames(xg_test_result_ind) = xg_colnames
colnames(xg_test_result_gu) = xg_colnames
colnames(xg_test_result_dong) = xg_colnames
# make station list for separating each station
test_station_list = c(3508, 3523, 3569, 3571, 3579, 3582,
3860, 500, 590, 591, 592)
rf_test_result_ind$station = rep(test_station_list, n_cv_tt)
elnet_test_result_ind$station = rep(test_station_list, n_cv_tt)
xg_test_result_ind$station = rep(test_station_list, n_cv_tt)
rf_test_result_gu$station = rep(test_station_list, n_cv_tt)
elnet_test_result_gu$station = rep(test_station_list, n_cv_tt)
xg_test_result_gu$station = rep(test_station_list, n_cv_tt)
rf_test_result_dong$station = rep(test_station_list, n_cv_tt)
elnet_test_result_dong$station = rep(test_station_list, n_cv_tt)
xg_test_result_dong$station = rep(test_station_list, n_cv_tt)
# make station list for separating each station
station_list = c(3508, 3523, 3569, 3571, 3579, 3582,
3860, 500, 590, 591, 592, 'gu', 'dong')
rf_best_result$station = rep(station_list, n_cv_tt)
elnet_best_result$station = rep(station_list, n_cv_tt)
xg_best_result$station = rep(station_list, n_cv_tt)
rf_train_result$station = rep(station_list, each=nrow(rf_tv_mse_3508$train_mse_mat))
rf_val_result$station = rep(station_list, each=nrow(rf_tv_mse_3508$val_mse_mat))
elnet_train_result$station = rep(station_list, each=nrow(elnet_tv_mse_3508$train_mse_mat))
elnet_val_result$station = rep(station_list, each=nrow(elnet_tv_mse_3508$val_mse_mat))
xg_train_result$station = rep(station_list, each=nrow(xg_tv_mse_3508$train_mse_mat))
xg_val_result$station = rep(station_list, each=nrow(xg_tv_mse_3508$val_mse_mat))
# save results
write.csv(rf_train_result, "./result/return/test/rf_train_result.csv", row.names=F)
write.csv(rf_val_result, "./result/return/test/rf_val_result.csv", row.names=F)
write.csv(rf_best_result, "./result/return/test/rf_best_result.csv", row.names=F)
write.csv(rf_test_result_ind, "./result/return/test/rf_test_result_ind.csv", row.names=F)
write.csv(rf_test_result_gu, "./result/return/test/rf_test_result_gu.csv", row.names=F)
write.csv(rf_test_result_dong, "./result/return/test/rf_test_result_dong.csv", row.names=F)
write.csv(elnet_train_result, "./result/return/test/elnet_train_result.csv", row.names=F)
write.csv(elnet_val_result, "./result/return/test/elnet_val_result.csv", row.names=F)
write.csv(elnet_best_result, "./result/return/test/elnet_best_result.csv", row.names=F)
write.csv(elnet_test_result_ind, "./result/return/test/elnet_test_result_ind.csv", row.names=F)
write.csv(elnet_test_result_gu, "./result/return/test/elnet_test_result_gu.csv", row.names=F)
write.csv(elnet_test_result_dong, "./result/return/test/elnet_test_result_dong.csv", row.names=F)
write.csv(xg_train_result, "./result/return/test/xg_train_result.csv", row.names=F)
write.csv(xg_val_result, "./result/return/test/xg_val_result.csv", row.names=F)
write.csv(xg_best_result, "./result/return/test/xg_best_result.csv", row.names=F)
write.csv(xg_test_result_ind, "./result/return/test/xg_test_result_ind.csv", row.names=F)
write.csv(xg_test_result_gu, "./result/return/test/xg_test_result_gu.csv", row.names=F)
write.csv(xg_test_result_dong, "./result/return/test/xg_test_result_dong.csv", row.names=F)
end_time = Sys.time()
running_time = end_time - start_time
print(running_time)
y.vec = c(0.2,0.4,0.3,0.7,0.6,0.5)
x1.vec = c(10,15,13,12,11,13)
x2.vec = c(5,7,9,6,4,3)
x3.vec = c(12,13,11,10,9,8)
matrix(x1.vec,x2.vec,x3.vec)
cbind(x1.vec,x2.vec,x3.vec)
matrix(cbind(x1.vec,x2.vec,x3.vec))
x.mat = cbind(x1.vec,x2.vec,x3.vec)
loss.fun = function(b.vec,y.vec,x.mat){
sum((y.vec-x.mat%*%b.vec)^2)
}
b.vec = c(0,0,0)
x.mat = cbind(x1.vec,x2.vec,x3.vec)
loss.fun = function(b.vec,y.vec,x.mat){
sum((y.vec-x.mat%*%b.vec)^2)
}
loss.fun(b.vec,y.vec,x.mat)
iter.max = 10^3; eps = 1e-7
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
x.mat[,1]
x.mat
x.mat[,-1]
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(iiter in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
if (sum((ob.vec-b.vec)^2)<eps) break
}
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
if (sum((ob.vec-b.vec)^2)<eps) break
}
b.vec
loss.fun(b.vec,y.vec,x.mat)
b.vec
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
if (sum((ob.vec-b.vec)^2)<eps) break
}
loss.fun(b.vec,y.vec,x.mat)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-3; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
if (sum((ob.vec-b.vec)^2)<eps) break
}
loss.fun(b.vec,y.vec,x.mat)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
if (sum((ob.vec-b.vec)^2)<eps) break
}
loss.fun(b.vec,y.vec,x.mat)
b.vec
l.vec = rep(0,iter.max)
l.vec
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec
i
seq(1,i)
plot(seq(1,i),l.vec)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-3; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
b.vec
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-3; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
plot(seq(1,i),l.vec)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
plot(seq(1,i),l.vec)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-3; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
plot(seq(1,i),l.vec)
i
i
iter.max
l.vec = rep(0,iter.max)
x.mat = cbind(x1.vec,x2.vec,x3.vec)
l.vec = rep(0,iter.max)
loss.fun = function(b.vec,y.vec,x.mat){
sum((y.vec-x.mat%*%b.vec)^2)
}
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-3; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
plot(seq(1,i),l.vec)
x.mat = cbind(x1.vec,x2.vec,x3.vec)
l.vec = rep(0,iter.max)
loss.fun = function(b.vec,y.vec,x.mat){
sum((y.vec-x.mat%*%b.vec)^2)
}
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
plot(seq(1,i),l.vec)
dev.off()
l.vec = rep(0,iter.max)
l.vec
loss.fun = function(b.vec,y.vec,x.mat){
sum((y.vec-x.mat%*%b.vec)^2)
}
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec
l.vec = rep(NA,iter.max)
loss.fun = function(b.vec,y.vec,x.mat){
sum((y.vec-x.mat%*%b.vec)^2)
}
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-7; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec=l.vec[!is.na(l.vec)]
l.vec
plot(seq(1,i),l.vec)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-3; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec=l.vec[!is.na(l.vec)]
plot(seq(1,i),l.vec)
l.vec
x.mat = cbind(x1.vec,x2.vec,x3.vec)
l.vec = rep(NA,iter.max)
loss.fun = function(b.vec,y.vec,x.mat){
sum((y.vec-x.mat%*%b.vec)^2)
}
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-3; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec
l.vec=l.vec[!is.na(l.vec)]
plot(seq(1,i),l.vec)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-5; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec=l.vec[!is.na(l.vec)]
l.vec
plot(seq(1,i),l.vec)
loss.fun(b.vec,y.vec,x.mat)
#xTy = sum(x*y)
iter.max = 10^3; eps = 1e-8; b.vec = rep(0,3)
for (i in 1:iter.max){
ob.vec = b.vec
for(j in 1:3){
a = sum(x.mat[,j]^2)
b = sum(x.mat[,j]*(y.vec-x.mat[,-j]%*%b.vec[-j]))
b.vec[j] = b/a
}
l.vec[i] = loss.fun(b.vec,y.vec,x.mat)
if (sum((ob.vec-b.vec)^2)<eps) break
}
l.vec=l.vec[!is.na(l.vec)]
plot(seq(1,i),l.vec)
loss.fun(b.vec,y.vec,x.mat)
setwd("~/Desktop/4-1/DataMining/project/result/rent/test")
read.csv('rf_best_result_500.csv')
read.csv('rf_best_result_590.csv')
setwd("~/Desktop/4-1/DataMining/project/result/return/test")
read.csv('rf_best_result_590.csv'")
read.csv('rf_best_result_590.csv')
read.csv('rf_best_result.csv')
read.csv('elnet_best_result.csv')
read.csv('rf_test_result.csv')
read.csv('rf_test_result_dong.csv')
read.csv('rf_test_result_gu.csv')
read.csv('rf_test_result_ind.csv')
read.csv('xg_test_result_dong.csv')
read.csv('xg_test_result_gu.csv')
read.csv('xg_test_result_ind.csv')
read.csv('elnet_test_result_dong.csv')
read.csv('elnet_test_result_gu.csv')
read.csv('elnet_test_result_ind.csv')
read.csv('elnet_test_result_dong.csv')
read.csv('elnet_test_result_gu.csv')
read.csv('elnet_test_result_ind.csv')
read.csv('rf_test_result_dong.csv')
read.csv('rf_test_result_gu.csv')
read.csv('rf_test_result_ind.csv')
